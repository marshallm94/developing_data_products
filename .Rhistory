shiny::runApp()
?tabsetPanel
?tabPanel
runApp()
?viewFinancials
runApp()
runApp()
?tabsetPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
?renderTable
runApp()
runApp()
runApp()
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
ticker <- as.character(input$ticker)
adj_ticker <- getFin(ticker)
financial <- get(adj_ticker)
financial
input$ticker <- "AAPL"
getFin(AAPL)
getFin("AAPL")
get(getFin("AAPL"))
runApp()
getQuote(ticker)
ticker <- "AAPL"
getQuote(ticker)
getQuote(ticker)$Last
runApp()
runApp()
runApp()
runApp()
library(quantmod)
library(dplyr)
?shinyServer
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tabsetPanel
runApp()
runApp()
?renderText
runApp()
runApp()
runApp()
runApp()
runApp('~/data_science_coursera/developing_data_products/test')
runApp()
runApp()
getFin(ticker)
runApp()
get(getFin(ticker))
blah <- get(getFin(ticker))
blah$IS
adj_ticker <- getFin(ticker)
statement <- get(ticker)
ticker <- "AAPL"
adj_ticker <- getFin(ticker)
statement <- get(ticker)
adj_ticker <- getFin(ticker)
statement <- get(adj_ticker)
statement$IS
runApp()
getQuote(ticker)
runApp()
ticker <- "AAPL"
get(ticker)
getQuote(ticker)
?getQuote
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?function
)
runApp()
runApp()
?textOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(financial)
ticker <- "AAPL"
adj_ticker <- getFin(ticker)
financial <- get(adj_ticker)
financial
class(adj_ticker)
class(financial)
runApp()
runApp()
financial
viewFinancials(financial)
viewFinancials(financial, type = "BS", period = "A")
viewFinancials(financial, type = "CF", period = "A")
viewFinancials(financial, type = "IS", period = "A")
viewFinancials(financial, type = "BS", period = "Q")
viewFinancials(financial, type = "CF", period = "Q")
viewFinancials(financial, type = "IS", period = "Q")
runApp()
class(financial)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ticker <- NULL
runApp()
runApp()
runApp()
class(change_ticker)
change_ticker <- reactive(function() {
ticker <- input$ticker
})
class(change_ticker())
runApp()
?reactive
runApp()
runApp()
class(financial)
financials
financial
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
viewFinancials(ticker)
viewFinancials(getFin("AAPL"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ticker
tickers <- "AAPL"
adj_tickers <- NULL
for(i in tickers) {
adj_ticker <-  try(getFin(i))
adj_tickers <- c(adj_tickers, adj_ticker)
print("Processing...please wait...")
}
#View most recent quarterly balance sheet of each company
multiple_NCAVPS <- NULL
for(i in adj_tickers) {
if(grepl("Error", i) == TRUE) {
print("Adjusted ticker not found...moving to next adjusted ticker...")
} else {
financial <- get(i)
balance_sheet <-as.data.frame(viewFinancials(financial, type = "BS",
period = "Q"))
#Current Assets are in row 10, total liabilities in row 31, total shares
#outstanding in row 42
NCAVPS <- (balance_sheet[10,1] - balance_sheet[31,1])/balance_sheet[42,1]
df <- cbind(i, NCAVPS)
multiple_NCAVPS <- rbind(multiple_NCAVPS, df)
}
}
#Format multi_NCAVPS matrix to data frame
multiple_NCAVPS <- as.data.frame(multiple_NCAVPS)
multiple_NCAVPS <- rename(multiple_NCAVPS, Company = i)
multiple_NCAVPS$NCAVPS <- as.numeric(as.character(multiple_NCAVPS$NCAVPS))
multiple_NCAVPS$Company <- as.character(multiple_NCAVPS$Company)
multiple_NCAVPS$Company <- gsub(".f$","", multiple_NCAVPS$Company)
#Remove negative NCAVPS and NA's
multiple_NCAVPS <- filter(multiple_NCAVPS, is.na(multiple_NCAVPS$NCAVPS) == FALSE)
multiple_NCAVPS <- filter(multiple_NCAVPS, multiple_NCAVPS$NCAVPS >= 0)
#Order multiple_NCAVPS by NCAVPS in descending order
multiple_NCAVPS <- arrange(multiple_NCAVPS, desc(NCAVPS))
#Pull live quote from Yahoo Finance and append to data frame multiple_NCAVPS
stockquotes <- NULL
for(i in multiple_NCAVPS$Company) {
stockquote <- getQuote(i)
last_price <- stockquote$Last
stockquotes <- c(stockquotes, last_price)
print("Processing...please wait...")
}
multiple_NCAVPS <- mutate(multiple_NCAVPS, Last_Price = stockquotes)
multiple_NCAVPS$Last_Price <- as.numeric(multiple_NCAVPS$Last_Price)
multiple_NCAVPS <- mutate(multiple_NCAVPS,
GrahamsRule = if_else(NCAVPS > Last_Price, 1, 0))
#Order multiple_NCAVPS by GrahamsRule
multiple_NCAVPS <- arrange(multiple_NCAVPS, desc(GrahamsRule))
#Add Margin of Safety attribute and order
multiple_NCAVPS <- mutate(multiple_NCAVPS,  price_per_dollar= Last_Price/NCAVPS)
multiple_NCAVPS <- arrange(multiple_NCAVPS, price_per_dollar)
multiple_NCAVPS
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?textInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?builder
?getQuote
runApp()
runApp()
balance_sheet <-as.data.frame(viewFinancials(adjust_financial(),
type = "BS",
period = "Q"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
)
)
)
)
)
runApp()
runApp()
?tabsetPanel
?tabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
?builder
?p
runApp()
ticker <- "BEBE"
adj_tickers <- NULL
for(i in tickers) {
adj_ticker <-  try(getFin(i))
adj_tickers <- c(adj_tickers, adj_ticker)
print("Processing...please wait...")
}
#View most recent quarterly balance sheet of each company
multiple_NCAVPS <- NULL
for(i in adj_tickers) {
if(grepl("Error", i) == TRUE) {
print("Adjusted ticker not found...moving to next adjusted ticker...")
} else {
financial <- get(i)
balance_sheet <-as.data.frame(viewFinancials(financial, type = "BS",
period = "Q"))
#Current Assets are in row 10, total liabilities in row 31, total shares
#outstanding in row 42
NCAVPS <- (balance_sheet[10,1] - balance_sheet[31,1])/balance_sheet[42,1]
df <- cbind(i, NCAVPS)
multiple_NCAVPS <- rbind(multiple_NCAVPS, df)
}
}
#Format multi_NCAVPS matrix to data frame
multiple_NCAVPS <- as.data.frame(multiple_NCAVPS)
multiple_NCAVPS <- rename(multiple_NCAVPS, Company = i)
multiple_NCAVPS$NCAVPS <- as.numeric(as.character(multiple_NCAVPS$NCAVPS))
multiple_NCAVPS$Company <- as.character(multiple_NCAVPS$Company)
multiple_NCAVPS$Company <- gsub(".f$","", multiple_NCAVPS$Company)
multiple_NCAVPS
runApp()
tickers <- "BEBE"
adj_tickers <- NULL
for(i in tickers) {
adj_ticker <-  try(getFin(i))
adj_tickers <- c(adj_tickers, adj_ticker)
print("Processing...please wait...")
}
#View most recent quarterly balance sheet of each company
multiple_NCAVPS <- NULL
for(i in adj_tickers) {
if(grepl("Error", i) == TRUE) {
print("Adjusted ticker not found...moving to next adjusted ticker...")
} else {
financial <- get(i)
balance_sheet <-as.data.frame(viewFinancials(financial, type = "BS",
period = "Q"))
#Current Assets are in row 10, total liabilities in row 31, total shares
#outstanding in row 42
NCAVPS <- (balance_sheet[10,1] - balance_sheet[31,1])/balance_sheet[42,1]
df <- cbind(i, NCAVPS)
multiple_NCAVPS <- rbind(multiple_NCAVPS, df)
}
}
#Format multi_NCAVPS matrix to data frame
multiple_NCAVPS <- as.data.frame(multiple_NCAVPS)
multiple_NCAVPS <- rename(multiple_NCAVPS, Company = i)
multiple_NCAVPS$NCAVPS <- as.numeric(as.character(multiple_NCAVPS$NCAVPS))
multiple_NCAVPS$Company <- as.character(multiple_NCAVPS$Company)
multiple_NCAVPS$Company <- gsub(".f$","", multiple_NCAVPS$Company)
multiple_NCAVPS
runApp()
?elseif
?else
?else
else
?else
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?builder
runApp()
runApp()
runApp()
viewFinancials(adjust_financial(), type = "CF", period = "A")
runApp()
runApp()
runApp()
runApp()
runApp()
?cbind
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
NCAVPS
rm(NCAVPS)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?builder
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name = "marshallm94",
token = "E86C077C044522A15662BE2B7827B06B",
secret = "cN8/q3FQiOxqcFfxIhb5dMAkCb4GENnVugS50OSC")
?textInput
runApp()
